---

- name: Install python3-apt dependency for Ansible apt and apt_repository modules
  command: apt-get -y install python3-apt
  args:
    warn: no
  register: preconf_apt_dependencies_installed
  changed_when: "'is already the newest version' not in preconf_apt_dependencies_installed.stdout"
  environment:
    LANG: en_US.UTF-8
    LC_MESSAGES: en_US.UTF-8
    LC_ALL: en_US.UTF-8

- name: Remove or purge packages
  apt:
    package: "{{ item.key }}"
    state: absent
    purge: "{{ item.value.purge|default(False) }}"
  with_dict: "{{ preconf.packages_remove }}"
  when: item.value.state is not defined or item.value.state == 'absent'
  tags:
    - preconf-apt-packages-remove
    - preconf-apt

- name: Update and then safe upgrade installed packages
  apt:
    update_cache: yes
    upgrade: yes

- name: Add/remove apt keys
  apt_key:
    id: "{{ item.value.id }}"
    keyserver: "{{ item.value.keyserver | default(omit) }}"
    url: "{{ item.value.url | default(omit) }}"
    state: "{{ item.value.state | default('present') }}"
  with_dict: "{{ preconf.apt_keys }}"
  when: item.value.state is defined and item.value.state != 'ignored'
  register: preconf_apt_keys
  tags:
    - preconf-apt-keys
    - preconf-apt

- name: Add/remove apt repositories
  apt_repository:
    repo: "{{ item.value.repository }}"
    filename: "{{ item.value.filename }}"
    state: "{{ item.value.state | default('present') }}"
    update_cache: no
  with_dict: "{{ preconf.repositories }}"
  when: item.value.state is defined and item.value.state != 'ignored'
  register: preconf_apt_repositories
  tags:
    - preconf-apt-repositories
    - preconf-apt

- name: Update apt cache after adding/removing apt keys and repositories
  apt:
    update_cache: yes
    upgrade: no
  when: (preconf_apt_keys is defined and preconf_apt_keys.changed) or
        (preconf_apt_repositories is defined and preconf_apt_repositories.changed)
  tags:
    - preconf-apt-keys
    - preconf-apt-repositories
    - preconf-apt
    - skip_ansible_lint

- name: Installing packages
#  debug: msg="{{ preconf.package_sets[item] }}"
  apt:
    pkg: "{{ preconf.package_sets[item] }}"
    install_recommends: no
  with_items: "{{ preconf.package_sets_install }}"
  tags:
    - preconf-apt-packages
    - preconf-apt

# This is "standard system utilities" metapackage.
# @see sudo tasksel --task-package standard
- name: Install ubuntu standard utilities
  apt:
    pkg=ubuntu-standard
    install_recommends=yes

- name: Installing useful utilities
  apt:
    pkg: "{{ preconf.utilities }}"

- name: Remove apt outdated caches and packages
  apt:
    autoclean: yes
    autoremove: yes

- name: Alter grub file
  lineinfile:
    dest: /etc/default/grub
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    backup: yes
  with_items: "{{ preconf.grub }}"
  register: preconf_grub
  tags:
    - preconf-grub

- name: Update grub
  command: update-grub
  when: preconf_grub is changed
  tags:
    - preconf-grub

- name: Apply sysctl settings
  sysctl:
    name={{ item.key }}
    value={{ item.value }}
  with_dict: "{{ preconf.sysctl }}"

# The hostname service runs hostname -b -F /etc/hostname (see /etc/init/hostname.conf), which exits after setting
# the hostname, so it doesn't continue running. The following is not working on Ubuntu 16.04 Xenial:
# sudo service hostname restart
- name: Apply hostname
  hostname:
    name={{ preconf.hostname.hostname }}
  when: preconf.hostname.apply
  tags:
    - preconf-hostname

- name: Apply FQDN hostname to /etc/hosts and others hosts parameters
  template:
    src=hosts.j2
    dest=/etc/hosts
    owner=root
    group=root
    mode=0644
  when: preconf.hostname.apply
  tags:
    - preconf-hostname
